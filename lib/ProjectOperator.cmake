CMAKE_MINIMUM_REQUIRED(VERSION 3.0.2)

FUNCTION(CONCRETE_ADD_PROJECT)
    CMAKE_PARSE_ARGUMENTS(
        _PROJECT
        ""
        "NAME;TYPE;"
        "INCLUDE_FILES;SOURCE_FILES;DEPENDS;DEFINITIONS;INCLUDE_DIRECTORIES;LINK_DIRECTORIES;LINK_LIBRARIES;DEBUG_LIBRARIES;RELEASE_LIBRARIES"
        ${ARGN}
    )

    LIST(APPEND _PROJECT_DEFINITIONS ${CONCRETE_BASE_DEFINITIONS})

    IF(MSVC)
        LIST(APPEND _PROJECT_DEFINITIONS -DUNICODE -D_UNICODE)
    ENDIF(MSVC)

    ADD_DEFINITIONS(${_PROJECT_DEFINITIONS})

    LIST(APPEND _PROJECT_INCLUDE_DIRECTORIES ${CONCRETE_BUILD_PATH})

    INCLUDE_DIRECTORIES(
        ${_PROJECT_INCLUDE_DIRECTORIES}
    )

    LIST(APPEND _PROJECT_LINK_DIRECTORIES ${CONCRETE_LIBRARY_DIR})

    LINK_DIRECTORIES(
        ${_PROJECT_LINK_DIRECTORIES}
    )

    LINK_LIBRARIES(
        ${_PROJECT_LINK_LIBRARIES}
    )

    IF(${_PROJECT_TYPE} STREQUAL "Execute")
        ADD_EXECUTABLE(${_PROJECT_NAME} ${_PROJECT_INCLUDE_FILES} ${_PROJECT_SOURCE_FILES})
    ELSEIF(${_PROJECT_TYPE} STREQUAL "Static")
        ADD_LIBRARY(${_PROJECT_NAME} ${_PROJECT_INCLUDE_FILES} ${_PROJECT_SOURCE_FILES})
    ELSEIF(${_PROJECT_TYPE} STREQUAL "Dynamic")    
        ADD_LIBRARY(${_PROJECT_NAME} SHARED ${_PROJECT_INCLUDE_FILES} ${_PROJECT_SOURCE_FILES})
    ELSEIF(${_PROJECT_TYPE} STREQUAL "Module")
        ADD_LIBRARY(${_PROJECT_NAME} MODULE ${_PROJECT_INCLUDE_FILES} ${_PROJECT_SOURCE_FILES})
    ENDIF()
    
    LIST(LENGTH _PROJECT_DEBUG_LIBRARIES _PROJECT_DEBUG_LIBRARIES_LENGTH)
    LIST(LENGTH _PROJECT_RELEASE_LIBRARIES _PROJECT_RELEASE_LIBRARIES_LENGTH)

    IF(NOT ${_PROJECT_RELEASE_LIBRARIES_LENGTH} EQUAL 0)
        TARGET_LINK_LIBRARIES(${_PROJECT_NAME} optimized ${_PROJECT_RELEASE_LIBRARIES})
        
        IF(${_PROJECT_DEBUG_LIBRARIES_LENGTH} EQUAL 0)
            TARGET_LINK_LIBRARIES(${_PROJECT_NAME} debug ${_PROJECT_RELEASE_LIBRARIES})
        ELSE()
            TARGET_LINK_LIBRARIES(${_PROJECT_NAME} debug ${_PROJECT_DEBUG_LIBRARIES})
        ENDIF(${_PROJECT_DEBUG_LIBRARIES_LENGTH} EQUAL 0)
    ELSE()
        IF(NOT ${_PROJECT_DEBUG_LIBRARIES_LENGTH} EQUAL 0)
            TARGET_LINK_LIBRARIES(${_PROJECT_NAME} debug ${_PROJECT_DEBUG_LIBRARIES})
        ENDIF(NOT ${_PROJECT_DEBUG_LIBRARIES_LENGTH} EQUAL 0)
    ENDIF(NOT ${_PROJECT_RELEASE_LIBRARIES_LENGTH} EQUAL 0)

    # Todo::DEPENDS
ENDFUNCTION(CONCRETE_ADD_PROJECT)

FUNCTION(CONCRETE_ADD_SUBDIRECTORY DIR_PATH)
    ADD_SUBDIRECTORY(${CONCRETE_PROJECT_SOURCE_DIR}/${DIR_PATH} ${CONCRETE_BUILD_PATH}/${DIR_PATH}.project)
ENDFUNCTION(CONCRETE_ADD_SUBDIRECTORY)

FUNCTION(CONCRETE_ADD_SUBDIRECTORY_WITH_FOLDER DIR_PATH FOLDER_NAME)
    ADD_SUBDIRECTORY(${CONCRETE_PROJECT_SOURCE_DIR}/${DIR_PATH} ${CONCRETE_BUILD_PATH}/${DIR_PATH}.project)
    SET_PROPERTY(DIRECTORY "${CONCRETE_PROJECT_SOURCE_DIR}/${DIR_PATH}" PROPERTY FOLDER "${FOLDER_NAME}")
ENDFUNCTION(CONCRETE_ADD_SUBDIRECTORY_WITH_FOLDER)